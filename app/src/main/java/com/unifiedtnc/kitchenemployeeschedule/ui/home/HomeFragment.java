package com.unifiedtnc.kitchenemployeeschedule.ui.home;import android.content.DialogInterface;import android.os.Bundle;import android.os.Handler;import android.os.Parcelable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.LinearLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.fragment.app.Fragment;import androidx.lifecycle.Observer;import androidx.lifecycle.ViewModelProvider;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.unifiedtnc.kitchenemployeeschedule.R;import com.unifiedtnc.kitchenemployeeschedule.RetrofitClient;import com.unifiedtnc.kitchenemployeeschedule.RetrofitResponseModle.Datum;import com.unifiedtnc.kitchenemployeeschedule.RetrofitResponseModle.InerstTaskResponse;import com.unifiedtnc.kitchenemployeeschedule.RetrofitResponseModle.TaskResponce;import com.unifiedtnc.kitchenemployeeschedule.ShowTaskAdapter;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.List;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class HomeFragment extends Fragment {    TextView txtdate, txtToday;    Spinner spinner;    Runnable runnable;    Handler handler;    int delay;    View root;    String str_spinner;    String dayOfTheWeek;    View view;    LinearLayoutManager layoutManager;    RecyclerView recyclerView;     ShowTaskAdapter showTaskAdapter;    private Parcelable recyclerViewState;    String task_name;    LinearLayout linearLayout;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        root = inflater.inflate(R.layout.fragment_home, container, false);        handler = new Handler();        delay = 3 * 1000;        txtdate = root.findViewById(R.id.textView3);        txtToday = root.findViewById(R.id.textView6);        spinner = root.findViewById(R.id.spinner);        linearLayout=root.findViewById(R.id.linear);        recyclerView=root.findViewById(R.id.recyTask);        layoutManager=new LinearLayoutManager(getContext());        recyclerView.setLayoutManager(layoutManager);        recyclerViewState = recyclerView.getLayoutManager().onSaveInstanceState();       // Restore state        recyclerView.getLayoutManager().onRestoreInstanceState(recyclerViewState);        /////////////////        //layoutManager.smoothScrollToPosition(recyclerView, null, 0);        String mydate = java.text.DateFormat.getDateTimeInstance().format(Calendar.getInstance().getTime());        txtdate.setText(mydate);        ///////////////////////        SimpleDateFormat sdf = new SimpleDateFormat("EEEE");        Date d = new Date();        dayOfTheWeek = sdf.format(d);        txtToday.setText(dayOfTheWeek);        str_spinner="Kitchen #1";        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                str_spinner = spinner.getSelectedItem().toString();                showTaskStatus();            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        //   str_spinner = spinner.getSelectedItem().toString();//        inflaterViewFuntion(root);        return root;    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);    }   private void fetchTask(View root1) {//////        Call<TaskResponce> call = RetrofitClient//                .getInstance()//                .getApi().getTaskData(str_spinner, dayOfTheWeek);////        call.enqueue(new Callback<TaskResponce>() {//            @Override//            public void onResponse(Call<TaskResponce> call, Response<TaskResponce> response) {//                TaskResponce taskResponce = response.body();//                if (response.isSuccessful()) {////                    int i;//                    linearLayout.removeAllViews();//                    for (i = 0; i < taskResponce.getData().size(); i++) {//                      View  view = LayoutInflater.from(getContext()).inflate(R.layout.inflater_row, null, false);////                        TextView txt = view.findViewById(R.id.txt);////                        CheckBox checkBox = view.findViewById(R.id.checkBox);////                        txt.setText(taskResponce.getData().get(i).getTName());////                         task_name=txt.getText().toString();////                     //   String finalI = taskResponce.getData().get(i).getTId();////                        if (taskResponce.getData().get(i).getDTaskStatus().equals("1")) {////                            checkBox.setChecked(true);////                            checkBox.setEnabled(false);////////////                        } else {////////                            int finalI = i;////                            checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {////                                 @Override////                                 public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {////////////                                     AlertDialog.Builder builder=new AlertDialog.Builder(getContext());////                                     builder.setTitle("Check Box");////                                     builder.setMessage("Message Box..!");////                                     builder.create();////                                     builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {////                                         @Override////                                         public void onClick(DialogInterface dialog, int which) {//////////                                             Toast.makeText(getContext(), taskResponce.getData().get(finalI).getTId(), Toast.LENGTH_SHORT).show();////////                                             Call<InerstTaskResponse> call1=RetrofitClient////                                                     .getInstance()////                                                     .getApi()////                                                     .add_complete_task(taskResponce.getData().get(finalI).getTId(),"TestEmploy",task_name,dayOfTheWeek);////                                             call1.enqueue(new Callback<InerstTaskResponse>() {////                                                 @Override////                                                 public void onResponse(Call<InerstTaskResponse> call, Response<InerstTaskResponse> response) {////                                                     InerstTaskResponse inerstTaskResponse=response.body();////                                                     if (response.isSuccessful()){////                                                         Toast.makeText(getContext(), inerstTaskResponse.getMessage(), Toast.LENGTH_SHORT).show();////////////                                                     }else////                                                     {////                                                         Toast.makeText(getContext(), inerstTaskResponse.getMessage(), Toast.LENGTH_SHORT).show();////////                                                     }////////////                                                 }////////                                                 @Override////                                                 public void onFailure(Call<InerstTaskResponse> call, Throwable t) {////                                                     Toast.makeText(getContext(), t.getMessage(), Toast.LENGTH_SHORT).show();////////                                                 }////                                             });////////                                         }////                                     }).setNegativeButton("No",null);////////                                     builder.show();////////////                                 }////////                             });////////                        }//                   linearLayout.addView(view);////                    }////                   showTaskStatus();//                } else {//                    Toast.makeText(getContext(), taskResponce.getMessage(), Toast.LENGTH_SHORT).show();//                }//            }////            @Override//            public void onFailure(Call<TaskResponce> call, Throwable t) {//                Toast.makeText(getContext(), t.getMessage(), Toast.LENGTH_SHORT).show();////            }//        });//    }    private void showTaskStatus() {//        LinearLayout linearLayout = root.findViewById(R.id.linear);        Call<TaskResponce> call = RetrofitClient                .getInstance()                .getApi().getTaskData(str_spinner, dayOfTheWeek);        call.enqueue(new Callback<TaskResponce>() {            @Override            public void onResponse(Call<TaskResponce> call, Response<TaskResponce> response) {                TaskResponce taskResponce = response.body();                if (response.isSuccessful()) {                    Toast.makeText(getContext(), "show", Toast.LENGTH_SHORT).show();                    List<Datum> task_list=taskResponce.getData();                    showTaskAdapter=new ShowTaskAdapter(getActivity(),task_list);                    recyclerView.setAdapter(showTaskAdapter);//                    int i;//                    for (i = 0; i < taskResponce.getData().size(); i++) {//                        view = LayoutInflater.from(getContext()).inflate(R.layout.inflater_row, null, false);//                        TextView txt = view.findViewById(R.id.txt);//                        CheckBox checkBox = view.findViewById(R.id.checkBox);//                        txt.setText(taskResponce.getData().get(i).getTName());//                        task_name=txt.getText().toString();////                    }                } else {                    Toast.makeText(getContext(), taskResponce.getMessage(), Toast.LENGTH_SHORT).show();                }            }            @Override            public void onFailure(Call<TaskResponce> call, Throwable t) {                Toast.makeText(getContext(), t.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    @Override    public void onResume() {    //    fetchTask(root);    //    start handler as activity become visible        handler.postDelayed(runnable = new Runnable() {            public void run() {                //do something              showTaskStatus();             //   inflaterViewFuntion(root);                handler.postDelayed(runnable, delay);            }        }, delay);        super.onResume();    }    // If onPause() is not included the threads will double up when you// reload the activity    @Override    public void onPause() {        handler.removeCallbacks(runnable); //stop handler when activity not visible        super.onPause();    }}